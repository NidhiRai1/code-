Dp questions 

1️⃣ Climbing Stairs (Fibonacci Variant)
Problem: You can climb 1 or 2 steps at a time. Find the number of ways to reach the top (n-th step).

Brootfors Approch 

def climbStairs(n):
    if n <= 2:
        return n  # Base cases: 1 step → 1 way, 2 steps → 2 ways
    return climbStairs(n - 1) + climbStairs(n - 2)  # Recursive formula

TC - 2^n    and    SC - n

Midleel Approch

def climbStairs(n):
    if n <= 2:
        return n
    dp = [0] * (n + 1)
    dp[1], dp[2] = 1, 2
    for i in range(3, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]
    return dp[n]

TC - N     AND    SC - N 

Best Approch 

def climbStairs(n):
    if n == 1:
            return 1
        if n == 2:
            return 2
        
        first, second = 1, 2
        for _ in range(3, n + 1):
            first, second = second, first + second
        
        return second

tc - n and sc - 1


2️⃣ Coin Change
Problem: Given coins[] and an amount target, find the minimum number of coins needed.

BROOTFORCE APPROCH 

def coinChangeBruteForce(coins, amount):
    if amount == 0:
        return 0  # Base case: No coins needed
    if amount < 0:
        return float('inf')  # Impossible case

    minCoins = float('inf')
    for coin in coins:
        res = coinChangeBruteForce(coins, amount - coin)  # Try taking each coin
        if res != float('inf'):
            minCoins = min(minCoins, res + 1)  # Update minimum

    return minCoins

TC - 2^n   AND     SC - n

MIDLEVEL/best APPROCH 

def coinChangeDP(coins, amount):
    dp = [float('inf')] * (amount + 1)  # Step 1: Initialize DP array
    dp[0] = 0  # Base case: No coins needed for amount 0

    for coin in coins:  # Step 2: Process each coin
        for i in range(coin, amount + 1):  # Step 3: Update DP array
            dp[i] = min(dp[i], dp[i - coin] + 1)

    return dp[amount] if dp[amount] != float('inf') else -1  # Step 4: Return result

tc - m*n     and sc - n

3️⃣ Longest Increasing Subsequence (LIS)
Problem: Find the length of the longest increasing subsequence in an array.







4. Fibonacci Number (Top-Down & Bottom-Up)
Problem: Find the nth Fibonacci number using DP.

The Fibonacci sequence is defined 
F(n)=F(n−1)+F(n−2)

BROOTFORCE APPROCH 

 def fib(n):
        if n <= 1:
            return n
        return self.fib(n - 1) + self.fib(n - 2)

TC - 2^n                AND      SC - n

BEST APPROCH 

class Solution(object):
    def fib(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <= 1:
            return n  # No extra indentation here
        
        first, second = 0, 1
        for _ in range(2, n + 1):
            first, second = second, first + second  # Shift values
        
        return second

TC -   n             AND    SC - 1


5. House Robber
Problem: Given an array where each element represents money in a house, find the maximum money you can rob without robbing adjacent houses.

BROOTFORCE APPROCH 

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return self.helper(nums, 0)
    
    def helper(self, nums, index):
        if index >= len(nums):
            return 0  # Base case: No houses left
        
        # Either rob this house and skip next OR skip this house
        return max(nums[index] + self.helper(nums, index + 2), self.helper(nums, index + 1))

TC - 2^N       AND       SC - N

OPTIMIZED CODE 

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        
        prev1, prev2 = 0, 0
        
        for num in nums:
            new_rob = max(prev2 + num, prev1)  # Max of robbing this house or skipping
            prev2, prev1 = prev1, new_rob  # Shift values
        
        return prev1

TC - N       AND      SC - 1

6. Partition Equal Subset Sum
Problem: Determine if you can partition an array into two subsets with equal sum.

def can_partition_optimized(nums):
    total_sum = sum(nums)
    if total_sum % 2 != 0:
        return False

    target = total_sum // 2
    dp = [False] * (target + 1)
    dp[0] = True  # Base case: sum 0 is always possible

    for num in nums:
        for j in range(target, num - 1, -1):  # Traverse backward
             if dp[j - num]:  # If subset sum `j - num` is possible
                 dp[j] = True

    return dp[target]

# Example Usage
nums = [1, 5, 11, 5]
print(can_partition_optimized(nums))  # Output: True

TC - O(n * sum/2)  AND SC - sum/2
