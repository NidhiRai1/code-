# Queue 

class Queuee:
    def __init__(self):
        self.queue = []
        
    def enqueue(self, val):
        """Add an element to the queue"""
        self.queue.append(val)
        
    def dequeue(self):
        """Remove and return the front element from the queue"""
        if not self.isempty():
            return self.queue.pop(0)
        print("Queue is empty! Cannot dequeue.")
        return None

    def front(self):
        """Return the front element without removing it"""
        if not self.isempty():
            return self.queue[0]
        return None

    def isempty(self):
        """Check if the queue is empty"""
        return len(self.queue) == 0  # ✅ Corrected comparison
    
    def display(self):
        """Display the queue elements"""
        print("Queue:", self.queue)

# Example Usage:
q = Queuee()
q.enqueue(10)
q.enqueue(20)
q.enqueue(30)
q.display()  # Queue: [10, 20, 30]

q.dequeue()
q.display()  # Queue: [20, 30]

print("Front Element:", q.front())  # Front Element: 20
print("Is Queue Empty?", q.isempty())  # Is Queue Empty? False


# Min Heap 

A heap is a special binary tree that follows the heap property:
## Min Heap → The parent node is always smaller than its child nodes. and When we remove (pop) an element, the smallest element is removed.
       10                      Min Heap as Array  [10, 20, 30, 40, 50] 
      /  \
    20    30
   /  \  
  40   50

## Max Heap → The parent node is always greater than its child nodes.When we remove (pop) an element, the largest element is removed.
       50                       Max Heap as Array   [50, 30, 40, 20, 10]                
      /  \
    20    30
   /  \  
  40   50


import heapq

class MinHeap:
    def __init__(self):
        """Initialize an empty min heap"""
        self.heap = []
    
    def push(self, val):
        """Insert a value into the min heap"""
        heapq.heappush(self.heap, val)
    
    def pop(self):
        """Remove and return the smallest element"""
        if self.is_empty():
            print("Heap is empty! Cannot pop.")
            return None
        return heapq.heappop(self.heap)

    def peek(self):
        """Return the smallest element without removing it"""
        if self.is_empty():
            return None
        return self.heap[0]

    def is_empty(self):
        """Check if the heap is empty"""
        return len(self.heap) == 0
    
    def display(self):
        """Print the heap"""
        print("Min Heap:", self.heap)

class MaxHeap:
    def __init__(self):
        """Initialize an empty max heap"""
        self.heap = []
    
    def push(self, val):
        """Insert a value into the max heap (negate values to use heapq)"""
        heapq.heappush(self.heap, -val)  # Store negative values
    
    def pop(self):
        """Remove and return the largest element"""
        if self.is_empty():
            print("Heap is empty! Cannot pop.")
            return None
        return -heapq.heappop(self.heap)  # Convert back to positive
    
    def peek(self):
        """Return the largest element without removing it"""
        if self.is_empty():
            return None
        return -self.heap[0]  # Convert back to positive

    def is_empty(self):
        """Check if the heap is empty"""
        return len(self.heap) == 0
    
    def display(self):
        """Print the heap (convert negatives back to positives for display)"""
        print("Max Heap:", [-val for val in self.heap])

# Example Usage
min_heap = MinHeap()
min_heap.push(10)
min_heap.push(20)
min_heap.push(5)
min_heap.display()  # Min Heap: [5, 20, 10]
print("Popped from Min Heap:", min_heap.pop())  # Popped from Min Heap: 5
min_heap.display()  # Min Heap: [10, 20]

max_heap = MaxHeap()
max_heap.push(10)
max_heap.push(20)
max_heap.push(5)
max_heap.display()  # Max Heap: [20, 10, 5]
print("Popped from Max Heap:", max_heap.pop())  # Popped from Max Heap: 20
max_heap.display()  # Max Heap: [10, 5]

#Priority Queue 

import heapq

class PriorityQueue:
    def __init__(self):
        """Initialize an empty priority queue (Min Heap)"""
        self.queue = []
    
    def enqueue(self, val, priority):
        """Insert an element with priority"""
        heapq.heappush(self.queue, (priority, val))  # Tuple (priority, value)
    
    def dequeue(self):
        """Remove and return the element with the highest priority (smallest number)"""
        if self.is_empty():
            print("Priority Queue is empty! Cannot dequeue.")
            return None
        return heapq.heappop(self.queue)[1]  # Extract value (not priority)
    
    def peek(self):
        """Return the highest-priority element without removing it"""
        if self.is_empty():
            return None
        return self.queue[0][1]  # Extract value (not priority)
    
    def is_empty(self):
        """Check if the queue is empty"""
        return len(self.queue) == 0
    
    def display(self):
        """Print the priority queue"""
        print("Priority Queue:", self.queue)

# Example Usage
pq = PriorityQueue()
pq.enqueue("Task A", 2)
pq.enqueue("Task B", 1)  # Higher priority (lower number)
pq.enqueue("Task C", 3)
pq.display()  # Priority Queue: [(1, 'Task B'), (2, 'Task A'), (3, 'Task C')]

print("Dequeued:", pq.dequeue())  # Task B (priority 1)
pq.display()  # Priority Queue: [(2, 'Task A'), (3, 'Task C')]


## BFS

from collections import deque  # double-ended queue for BFS

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def bfs(root):
    if not root:
        return
    queue = deque([root])  # Initialize queue with root

    while queue:
        node = queue.popleft()  # Dequeue the front node
        print(node.val, end=" ")  # Process current node

        if node.left:
            queue.append(node.left)  # Enqueue left child
        if node.right:
            queue.append(node.right)  # Enqueue right child

# Create binary tree manually
#        1
#       / \
#      2   3
#     / \   \
#    4   5   6

root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)

root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

root.right.right = TreeNode(6)

# Call BFS
print("BFS traversal of the binary tree:")
bfs(root)  # Output: 1 2 3 4 5 6



